# Iran Chat App - Complete Project Brief for AI Development Agent

## üéØ Project Overview

**Project Name:** Iran Chat App  
**Purpose:** Secure, lightweight messaging application for local networks in Iran  
**Target:** Iranian users who need reliable local communication without external dependencies  
**Architecture:** Real-time web-based chat application using Node.js and Socket.IO  
**Database:** MySQL/MariaDB (migrated from SQLite for better performance and scalability)  

## üìã Project Requirements

### Core Functionality
1. **User Authentication System**
   - Unique username format: `@username` (e.g., `@john_tehran`)
   - Strong password requirements (8+ chars, uppercase, lowercase, number, special character)
   - Local registration (no email/phone required)
   - Secure password hashing with bcrypt

2. **User Profile & Sharing**
   - Auto-generated QR codes for each user profile
   - Shareable profile links: `{baseurl}/@username`
   - Profile display with username, display name, and QR code
   - Copy-to-clipboard functionality for sharing

3. **Chat Features**
   - **One-to-One Chat:** Private messaging between two users
   - **Group Chat:** Multi-user group conversations with admin controls
   - Real-time message delivery using WebSocket/Socket.IO
   - Message history and persistence
   - Online/offline user status indicators

4. **Friend/Contact System**
   - Add friends by username search
   - Friend request system
   - Contact list management
   - User discovery via search

### Technical Requirements
- **Backend:** Node.js with Express.js
- **Real-time Communication:** Socket.IO for WebSocket handling
- **Database:** MySQL/MariaDB with connection pooling
- **Frontend:** Pure HTML/CSS/JavaScript (no frameworks for simplicity)
- **Security:** bcryptjs for password hashing, input validation
- **QR Code Generation:** qrcode npm package
- **Environment Variables:** dotenv for configuration management
- **Local Network Optimized:** Must work without internet connectivity

## üèóÔ∏è Technical Architecture

### Backend Structure
```
server.js (main server file)
‚îú‚îÄ‚îÄ Express.js web server
‚îú‚îÄ‚îÄ Socket.IO real-time server
‚îú‚îÄ‚îÄ Authentication endpoints (/api/login, /api/register)
‚îú‚îÄ‚îÄ User management endpoints (/api/user/:username, /api/search/:query)
‚îú‚îÄ‚îÄ Message endpoints (/api/messages/*, /api/conversations/*)
‚îú‚îÄ‚îÄ Group endpoints (/api/groups/*)
‚îú‚îÄ‚îÄ Static file serving (HTML/CSS/JS)
‚îî‚îÄ‚îÄ Database integration (MySQL/MariaDB with connection pooling)
```

### Frontend Structure
```
public/
‚îú‚îÄ‚îÄ index.html (main chat interface)
‚îú‚îÄ‚îÄ profile.html (user profile page for shareable links)
‚îî‚îÄ‚îÄ assets/ (CSS, JavaScript, images)
```

### Database Schema (MySQL/MariaDB)
```sql
-- Users table
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    display_name VARCHAR(100) NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    user_id VARCHAR(36) UNIQUE NOT NULL,
    qr_code LONGTEXT,
    shareable_link VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_online BOOLEAN DEFAULT FALSE,
    INDEX idx_users_username (username),
    INDEX idx_users_user_id (user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Friends/Contacts table  
CREATE TABLE IF NOT EXISTS friends (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id VARCHAR(36) NOT NULL,
    friend_id VARCHAR(36) NOT NULL,
    status ENUM('pending', 'accepted', 'blocked') DEFAULT 'accepted',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE KEY unique_friendship (user_id, friend_id),
    INDEX idx_friends_user_id (user_id),
    INDEX idx_friends_friend_id (friend_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (friend_id) REFERENCES users(user_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Messages table
CREATE TABLE IF NOT EXISTS messages (
    id INT AUTO_INCREMENT PRIMARY KEY,
    sender_id VARCHAR(36) NOT NULL,
    recipient_id VARCHAR(36),
    group_id VARCHAR(36),
    message TEXT NOT NULL,
    message_type ENUM('text', 'image', 'file') DEFAULT 'text',
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_read BOOLEAN DEFAULT FALSE,
    INDEX idx_messages_sender_id (sender_id),
    INDEX idx_messages_recipient_id (recipient_id),
    INDEX idx_messages_group_id (group_id),
    INDEX idx_messages_timestamp (timestamp),
    FOREIGN KEY (sender_id) REFERENCES users(user_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Groups table
CREATE TABLE IF NOT EXISTS groups (
    id INT AUTO_INCREMENT PRIMARY KEY,
    group_id VARCHAR(36) UNIQUE NOT NULL,
    group_name VARCHAR(100) NOT NULL,
    admin_id VARCHAR(36) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_groups_group_id (group_id),
    FOREIGN KEY (admin_id) REFERENCES users(user_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- Group members table
CREATE TABLE IF NOT EXISTS group_members (
    id INT AUTO_INCREMENT PRIMARY KEY,
    group_id VARCHAR(36) NOT NULL,
    user_id VARCHAR(36) NOT NULL,
    joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE KEY unique_group_member (group_id, user_id),
    INDEX idx_group_members_group_id (group_id),
    INDEX idx_group_members_user_id (user_id),
    FOREIGN KEY (group_id) REFERENCES groups(group_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
```

## üîß Key Features to Implement

### 1. User Authentication Flow
```javascript
// Registration Process:
1. User enters @username, display name, strong password
2. Server validates input (username uniqueness, password strength)
3. Password gets hashed with bcrypt (12 rounds)
4. Generate UUID for user_id
5. Create QR code containing user profile data
6. Generate shareable link: baseurl/@username
7. Store user in database
8. Return user profile data (excluding password)

// Login Process:
1. User enters @username and password
2. Server validates credentials against database
3. Compare password with stored hash using bcrypt
4. Create socket session and mark user as online
5. Return user profile and friends list
```

### 2. Real-time Chat Implementation
```javascript
// Socket.IO Events to Handle:
- 'authenticate': User connects and authenticates socket
- 'private_message': Send one-to-one message
- 'group_message': Send message to group
- 'create_group': Create new group chat
- 'add_friend': Add user to friends list
- 'join_room': Join specific chat room
- 'disconnect': Handle user going offline

// Room Management:
- Private chats: Create room with format "userId1_userId2" (sorted)
- Group chats: Use group UUID as room name
- Auto-join users to appropriate rooms on connection
```

### 3. Database Integration (MySQL/MariaDB)
```javascript
// Database Operations Implemented:
- Connection pooling for better performance
- User CRUD with prepared statements
- Friend relationship management with bidirectional links
- Message storage with indexing for fast retrieval
- Group management with foreign key constraints
- Optimized search with indexes
- Message history with pagination support
- Automatic database initialization on startup
```

### 4. Security Considerations
```javascript
// Security Measures to Implement:
- Input validation and sanitization
- SQL injection prevention (use parameterized queries)
- XSS protection (escape HTML in messages)
- Rate limiting for API endpoints
- Strong password enforcement
- Session management for socket connections
```

## üì± User Interface Requirements

### Authentication UI
- **Login Form:** Username (@format), Password, Login button
- **Registration Form:** Username, Display Name, Password, Register button
- **Form Validation:** Real-time feedback for username format and password strength
- **Error Handling:** Clear error messages for invalid inputs

### Main Chat Interface
- **Header:** User avatar, display name, username, profile/logout buttons
- **Sidebar:** Search box, friends list, add friend button, chat list
- **Chat Area:** Message history, typing indicators, message input form
- **Responsive Design:** Works on mobile and desktop devices

### Profile Page
- **User Info:** Avatar, display name, username
- **QR Code:** Large, scannable QR code for profile sharing
- **Shareable Link:** Copy-to-clipboard functionality
- **Navigation:** Back to chat button

## üöÄ Database Deployment Commands

### Production Server Deployment
```bash
# 1. Clone the repository
git clone <repository-url>
cd freedome-chat

# 2. Install dependencies
npm install

# 3. Configure environment variables
cp .env.example .env
# Edit .env with your MySQL credentials:
# DB_HOST=localhost
# DB_USER=root
# DB_PASSWORD=your_password
# DB_NAME=freedom_chat

# 4. Deploy database schema
npm run setup-db

# 5. Start the application
npm start

# Alternative: Use PM2 for production
npm install -g pm2
pm2 start server.js --name iran-chat
pm2 save
pm2 startup
```

### Manual Database Deployment
```bash
# Option 1: Using setup script (recommended)
npm run setup-db

# Option 2: Manual MySQL deployment
mysql -u root -p < database/init-mariadb.sql

# Option 3: Via MySQL command line
mysql -u root -p
SOURCE /path/to/database/init-mariadb.sql;
```

### Database Reset/Migration
```bash
# Reset database (drops and recreates all tables)
npm run reset-db

# Check database status
mysql -u root -p -e "USE freedom_chat; SHOW TABLES;"
```

## üöÄ Development Progress

### Phase 1: Core Backend Setup ‚úÖ COMPLETED
1. ‚úÖ **Initialize Node.js project** with required dependencies
2. ‚úÖ **Set up Express.js server** with CORS and basic middleware
3. ‚úÖ **Integrate Socket.IO** for real-time communication
4. ‚úÖ **Create MySQL/MariaDB database** with required tables
5. ‚úÖ **Implement user authentication endpoints** (register/login)
6. ‚úÖ **Add input validation** and security measures
7. ‚úÖ **Migrate from SQLite to MySQL** for better scalability
8. ‚úÖ **Add environment configuration** with dotenv
9. ‚úÖ **Create database setup script** for easy deployment

### Phase 2: Database & User Management ‚úÖ COMPLETED
1. ‚úÖ **Create database helper functions** with models (User, Message, Group)
2. ‚úÖ **Implement user search functionality** with indexed queries
3. ‚úÖ **Add friend management system** with bidirectional relationships
4. ‚úÖ **Create user profile endpoints** for public profiles
5. ‚úÖ **Implement QR code generation** on user registration
6. ‚úÖ **Add shareable link handling** with profile routes
7. ‚úÖ **Database models with full CRUD operations**
8. ‚úÖ **Connection pooling for performance**

### Phase 3: Real-time Chat Features ‚úÖ COMPLETED
1. ‚úÖ **Set up Socket.IO event handlers** for all chat events
2. ‚úÖ **Implement private messaging system** with database persistence
3. ‚úÖ **Create group chat functionality** with admin controls
4. ‚úÖ **Add message persistence to database** with proper indexing
5. ‚úÖ **Implement online/offline status tracking** in real-time
6. ‚úÖ **Create room management system** for private and group chats
7. ‚úÖ **Message history endpoints** with pagination
8. ‚úÖ **Recent conversations API** for chat list

### Phase 4: Frontend Development
1. **Create responsive HTML/CSS layout**
2. **Implement authentication forms**
3. **Build chat interface components**
4. **Add real-time message display**
5. **Create profile management UI**
6. **Implement QR code display and sharing**

### Phase 5: Testing & Optimization
1. **Test authentication flow**
2. **Verify real-time messaging**
3. **Test group chat functionality**
4. **Validate security measures**
5. **Optimize for local network performance**
6. **Add error handling and user feedback**

## üìÇ Current File Structure

```
freedome-chat/
‚îú‚îÄ‚îÄ package.json               # Dependencies and scripts
‚îú‚îÄ‚îÄ server.js                  # Main server with all endpoints and Socket.IO
‚îú‚îÄ‚îÄ setup-db.js               # Database setup script  
‚îú‚îÄ‚îÄ .env                      # Environment variables (not in git)
‚îú‚îÄ‚îÄ .env.example              # Template for environment variables
‚îú‚îÄ‚îÄ .gitignore                # Git ignore file
‚îú‚îÄ‚îÄ ai-memory.txt             # Project documentation and roadmap
‚îú‚îÄ‚îÄ README-DATABASE.md        # Database setup guide
‚îú‚îÄ‚îÄ database/
‚îÇ   ‚îú‚îÄ‚îÄ init.sql              # Original MySQL schema
‚îÇ   ‚îú‚îÄ‚îÄ init-mariadb.sql      # MariaDB-compatible schema
‚îÇ   ‚îú‚îÄ‚îÄ database.js           # MySQL connection pool and helpers
‚îÇ   ‚îî‚îÄ‚îÄ models/
‚îÇ       ‚îú‚îÄ‚îÄ User.js           # User model with auth and friends
‚îÇ       ‚îú‚îÄ‚îÄ Message.js        # Message model with chat history
‚îÇ       ‚îî‚îÄ‚îÄ Group.js          # Group model with members
‚îî‚îÄ‚îÄ public/
    ‚îî‚îÄ‚îÄ index.html            # Basic HTML interface
```

## üéØ Success Criteria

The project will be considered complete when:

1. ‚úÖ **Users can register** with unique @usernames and strong passwords
2. ‚úÖ **Users can login** and authenticate successfully
3. ‚úÖ **QR codes are generated** for each user profile
4. ‚úÖ **Shareable links work** (baseurl/@username format)
5. ‚úÖ **One-to-one chat functions** in real-time
6. ‚úÖ **Group chat works** with multiple participants
7. ‚úÖ **Friend system operates** (add, search, manage contacts)
8. ‚úÖ **Messages persist** in database
9. ‚úÖ **Online/offline status** updates correctly
10. ‚úÖ **App works on local networks** without internet
11. ‚úÖ **UI is responsive** and user-friendly
12. ‚úÖ **Security measures** are properly implemented

## üîç Testing Requirements

### Functional Testing
- Register multiple users with different usernames
- Test login/logout functionality
- Send messages between users (one-to-one)
- Create and test group chats
- Add friends and verify contact lists
- Test QR code generation and profile sharing
- Verify message persistence across sessions

### Security Testing
- Test password strength validation
- Verify bcrypt password hashing
- Test input sanitization
- Check for SQL injection vulnerabilities
- Validate XSS protection

### Network Testing
- Test on local network without internet
- Verify multiple users can connect simultaneously
- Test real-time message delivery
- Check connection stability and reconnection

## üìù Additional Notes for AI Agent

1. **Focus on simplicity and reliability** - this app needs to work in challenging network conditions
2. **Prioritize local storage** - use SQLite for easy deployment without external database dependencies
3. **Ensure mobile compatibility** - many users will access via mobile devices
4. **Implement proper error handling** - network issues are common, provide good user feedback
5. **Use minimal external dependencies** - easier to deploy and maintain
6. **Consider Persian language support** - add RTL text support if needed
7. **Test thoroughly on local networks** - the primary use case is offline/local network operation

## üìù Current Project Status

### ‚úÖ Completed Features
- **Backend Infrastructure:** Full Node.js/Express server with Socket.IO
- **Database:** MySQL/MariaDB with optimized schema and indexing
- **User System:** Registration, login, profile management with QR codes
- **Real-time Chat:** Private and group messaging with Socket.IO
- **Friend System:** Add friends, manage contacts
- **Message Persistence:** All messages stored in database
- **API Endpoints:** Complete REST API for all features
- **Database Models:** User, Message, and Group models with full CRUD
- **Environment Config:** Secure credential management with .env
- **Deployment Scripts:** Easy database setup and migration

### üöß Next Steps (Phase 4)
- Frontend UI implementation (HTML/CSS/JavaScript)
- Authentication forms and validation
- Real-time chat interface
- Friend list and user search UI
- Group management interface
- Message history display
- Profile pages with QR codes

### üí° Key Technical Decisions Made
1. **MySQL over SQLite:** Better performance, scalability, and concurrent connections
2. **Connection Pooling:** Improved database performance under load
3. **MariaDB Compatibility:** Schema works with both MySQL and MariaDB
4. **Environment Variables:** Secure configuration management
5. **Database Models:** Clean separation of concerns with model classes
6. **Indexed Queries:** Fast search and message retrieval

This chat application is designed to provide Iranian users with a reliable, secure, and easy-to-use communication platform that works independently of external internet services while maintaining modern chat app functionality and user experience.